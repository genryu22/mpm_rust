import { OrthographicCamera } from "@react-three/drei";
import { Canvas } from "@react-three/fiber";
import { DefaultEventsMap } from "@socket.io/component-emitter";
import Head from "next/head";
import { useEffect, useRef, useState } from "react";
import { io, Socket } from 'socket.io-client';
import { Box, ParticleData, Particles, Points } from "../components/particles";
import { ParticlesRaw } from "../components/particles_raw";
import styles from '../styles/mpm.module.css'

const steps = 100;

export default function MPMHome() {
	const [finished, setFinished] = useState<boolean>(false);
	const socketRef = useRef<Socket<DefaultEventsMap, DefaultEventsMap> | null>(null);

	const bufferRef = useRef<ParticleData[][]>([]);

	useEffect(() => {
		console.log('Connectinng..');
		socketRef.current = io();

		socketRef.current.on('particles-data', (rawParticles) => {
			if (bufferRef.current) {
				const res: ParticleData[] = [];
				const xlist: number[] = rawParticles.x;
				const ylist: number[] = rawParticles.y;
				const vxlist: number[] = rawParticles.vx;
				const vylist: number[] = rawParticles.vy;
				let min = Number.MAX_SAFE_INTEGER;
				for (let i = 0; i < Math.min(xlist.length, ylist.length, vxlist.length, vylist.length); ++i) {
					res.push({
						x: [xlist[i], ylist[i]],
						v: [vxlist[i], vylist[i]],
					})
					if (vylist[i] < min) {
						min = vylist[i];
					}
				}
				//console.log(min);
				bufferRef.current.push(res);
				console.log(bufferRef.current.length);
				if (bufferRef.current.length == steps) {
					setFinished(true);
					console.log('reveived all');
				}
			}
		});

		return () => {
			console.log('Disconnecting..');
			socketRef.current?.disconnect();
		};
	}, []);

	return (<>
		<Head>
			<title>Create Next App</title>
			<meta name="description" content="Generated by create next app" />
			<meta name="viewport" content="width=device-width, initial-scale=1" />
			<link rel="icon" href="/favicon.ico" />
		</Head>
		<main className={styles.main}>
			<button onClick={() => {
				socketRef.current?.emit('requestMPM', {
					dt: 0.01,
					gravity: -10,
					dynamic_viscosity: 1e-2,
					alpha: 0,
					affine: true,
					space_width: 10,
					grid_width: 200,
					step_count: steps,
					c: 1,
					eos_power: 2,
				});
				setFinished(false);
				console.log('requested');
			}}>aaa</button>
			{/* <Canvas camera={{ position: [100, 10, 0], fov: 75 }}>
				<Points></Points>
			</Canvas> */}
			{/* <Canvas>
				<Particles particles={particles} />
			</Canvas> */}
			{finished && <ParticlesRaw particles={bufferRef.current}></ParticlesRaw>}
		</main>
	</>)
}